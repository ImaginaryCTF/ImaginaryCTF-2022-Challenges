from Crypto.Util.number import long_to_bytes, isPrime

n = 257827703087398016057355158654193468564980243813004452658087616586210487667215030370871398983230710387803731676134007721137156696714627083072326445637415561591372586919746606752675050732692230618293581354674196658443898625965651230501721590806987488038754683843111434873697465691139129703835890867256688046172118591
e = 65537
c = 194667317703687479298989188290833629421904543231503224641743768867721632949682167895699280370759100055314992068135383846690184090232092994595979623784341194946153538127175310278245722299688212621004144260665233469561373125699948009903943019071999887294005117156960295183926108287198987970959145603429337056005819069

def factor(n):
  primes = [n for n in range(2**9, 2**10) if isPrime(n)]
  out = []
  while not isPrime(n):
    for p in primes:
      if n%p == 0:
        out.append(p)
        n //= p
  out.append(n)
  return out

tot = 1
factors = factor(n)
used = []
for p in factors:
  if p in used:
    tot *= p
  else:
    tot *= p-1
    used.append(p)

d = pow(e,-1,tot)
print(long_to_bytes(pow(c,d,n)))

